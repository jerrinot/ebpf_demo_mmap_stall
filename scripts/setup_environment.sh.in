#!/bin/bash

# Environment setup script for eBPF mmap stall demonstration
# This script checks and installs required dependencies

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[SETUP]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

detect_distro() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        echo $ID
    elif [[ -f /etc/redhat-release ]]; then
        echo "rhel"
    elif [[ -f /etc/debian_version ]]; then
        echo "debian"
    else
        echo "unknown"
    fi
}

check_kernel_version() {
    local min_major=4
    local min_minor=1
    
    local kernel_version=$(uname -r | cut -d. -f1,2)
    local major=$(echo $kernel_version | cut -d. -f1)
    local minor=$(echo $kernel_version | cut -d. -f2)
    
    if [[ $major -gt $min_major ]] || [[ $major -eq $min_major && $minor -ge $min_minor ]]; then
        log "Kernel version $kernel_version is supported"
        return 0
    else
        error "Kernel version $kernel_version is too old. Minimum required: $min_major.$min_minor"
        return 1
    fi
}

check_bpf_support() {
    log "Checking eBPF support..."
    
    # Check if BPF syscall is available
    if [[ ! -f /proc/sys/kernel/unprivileged_bpf_disabled ]]; then
        warn "BPF syscall support not found"
        return 1
    fi
    
    # Check if debugfs is mounted (needed for kprobes)
    if [[ ! -d /sys/kernel/debug/tracing ]]; then
        warn "debugfs not mounted. Attempting to mount..."
        if mount -t debugfs debugfs /sys/kernel/debug 2>/dev/null; then
            log "debugfs mounted successfully"
        else
            error "Failed to mount debugfs. You may need to mount it manually:"
            error "  sudo mount -t debugfs debugfs /sys/kernel/debug"
            return 1
        fi
    fi
    
    # Check if kprobes are available
    if [[ ! -f /sys/kernel/debug/tracing/available_filter_functions ]]; then
        error "Kprobes not available. Please enable CONFIG_KPROBES in kernel"
        return 1
    fi
    
    # Check if handle_mm_fault is available for kprobing
    if ! grep -q "handle_mm_fault" /sys/kernel/debug/tracing/available_filter_functions 2>/dev/null; then
        error "handle_mm_fault function not available for kprobing"
        return 1
    fi
    
    log "eBPF support looks good"
    return 0
}

install_dependencies_ubuntu() {
    log "Installing dependencies for Ubuntu/Debian..."
    
    apt-get update
    
    # Install build essentials
    apt-get install -y build-essential cmake
    
    # Install BCC and eBPF dependencies
    apt-get install -y bpfcc-tools linux-headers-$(uname -r)
    apt-get install -y python3-bcc libbpf-dev
    
    # Install development libraries
    apt-get install -y pkg-config libbcc-dev
    
    log "Ubuntu/Debian dependencies installed"
}

install_dependencies_centos() {
    log "Installing dependencies for CentOS/RHEL/Fedora..."
    
    # Determine package manager
    if command -v dnf &> /dev/null; then
        PKG_MGR="dnf"
    else
        PKG_MGR="yum"
    fi
    
    # Install build essentials
    $PKG_MGR install -y gcc gcc-c++ make cmake
    
    # Install kernel headers
    $PKG_MGR install -y kernel-devel kernel-headers
    
    # Install BCC (may need EPEL on RHEL/CentOS)
    if [[ "$PKG_MGR" == "yum" ]]; then
        $PKG_MGR install -y epel-release
    fi
    
    $PKG_MGR install -y bcc-tools python3-bcc bcc-devel
    
    log "CentOS/RHEL/Fedora dependencies installed"
}

install_dependencies_arch() {
    log "Installing dependencies for Arch Linux..."
    
    pacman -Syu --noconfirm
    pacman -S --noconfirm base-devel cmake
    pacman -S --noconfirm linux-headers bcc bcc-tools python-bcc
    
    log "Arch Linux dependencies installed"
}

main() {
    log "Setting up environment for eBPF mmap stall demonstration"
    
    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        error "This setup script requires root privileges."
        error "Please run with sudo: sudo $0"
        exit 1
    fi
    
    # Check kernel version
    if ! check_kernel_version; then
        exit 1
    fi
    
    # Detect distribution
    DISTRO=$(detect_distro)
    log "Detected distribution: $DISTRO"
    
    # Install dependencies based on distribution
    case $DISTRO in
        ubuntu|debian)
            install_dependencies_ubuntu
            ;;
        centos|rhel|fedora)
            install_dependencies_centos
            ;;
        arch)
            install_dependencies_arch
            ;;
        *)
            warn "Unknown distribution. You may need to install dependencies manually:"
            info "Required packages:"
            info "  - build-essential/gcc/make/cmake"
            info "  - linux-headers for your kernel"
            info "  - bcc-tools, python3-bcc, libbcc-dev"
            info "  - pkg-config"
            ;;
    esac
    
    # Check BPF support
    if ! check_bpf_support; then
        error "eBPF support check failed"
        exit 1
    fi
    
    # Set up permissions for non-root users (optional)
    if [[ -f /proc/sys/kernel/unprivileged_bpf_disabled ]]; then
        current_value=$(cat /proc/sys/kernel/unprivileged_bpf_disabled)
        if [[ $current_value -eq 1 ]]; then
            warn "Unprivileged BPF is disabled. The demo will require root privileges."
            info "To allow non-root users to run some BPF programs:"
            info "  echo 0 > /proc/sys/kernel/unprivileged_bpf_disabled"
            info "Note: This demo monitors kernel functions and will still require root."
        fi
    fi
    
    log "Environment setup completed successfully!"
    info ""
    info "You can now build and run the demonstration:"
    info "  mkdir build && cd build"
    info "  cmake .."
    info "  make"
    info "  sudo ./scripts/run_demo.sh"
    info ""
    info "For more information, see the README.md file."
}

main "$@"